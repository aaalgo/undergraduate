RET = 1;
DIP = 2;
NEXT = 3;
DATA = 4;
TMP = 5;
DISP_ADDR = 5;
A0 = 32;
A1 = 33;
A2 = 34;
A3 = 35;
A4 = 36;
B0 = 40;
B1 = 41;
B2 = 42;
B3 = 43;
B4 = 44;
C0 = 50;
C1 = 51;
C2 = 52;
C3 = 53;
C4 = 54;
C5 = 55;
LED1 = 0x88;
LED2 = 0x89;
LED3 = 0x8A;
LED4 = 0x8B;
LED5 = 0x8C;
LED6 = 0x8D;
DOTS = 0x8E;
DIP1 = 0x80;
DIP2 = 0x81;
DIP3 = 0x82;
TRANS = 0xA8;
LIGHT1 = 0x90;
LIGHT2 = 0x91;
OVER = 0xA0;
CARRY = 0x98;
CONST 1;
STORE TRANS;
LOAD TRANS;
CONST 0;
STORE A4;
LOAD A4;
STORE B4;
LOAD B4;
READ1: CONST 0x80;
    STORE LIGHT1;
    LOAD LIGHT1;
    CONST A0;
    STORE DISP_ADDR;
    LOAD DISP_ADDR;
    CONST R1IN;
    STORE RET;
    LOAD RET;
    JMP ECHO;
R1IN:CONST R1_RET;
    STORE RET;
    LOAD RET;
    JMP INPUT;
R1_RET: LOAD NEXT;
    JZ READ2;
    LOAD A2;
    STORE A3;
    LOAD A3;
    LOAD A1;
    STORE A2;
    LOAD A2;
    LOAD A0;
    STORE A1;
    LOAD A1;
    LOAD DATA;
    STORE A0;
    LOAD A0;
    LOAD READ1;
    STORE RET;
    LOAD RET;
    JMP ECHO;
READ2: CONST 0x40;
    STORE LIGHT1;
    LOAD LIGHT1;
    CONST B0;
    STORE DISP_ADDR;
    LOAD DISP_ADDR;
    CONST R2IN;
    STORE RET;
    LOAD RET;
    JMP ECHO;
R2IN: CONST R2_RET;
    STORE RET;
    LOAD RET;
    JMP INPUT;
R2_RET:LOAD NEXT;
    JZ CALC;
    LOAD B2;
    STORE B3;
    LOAD B3;
    LOAD B1;
    STORE B2;
    LOAD B2;
    LOAD B0;
    STORE B1;
    LOAD B1;
    LOAD DATA;
    STORE B0;
    LOAD B0;
    CONST READ2;
    STORE RET;
    LOAD RET;
    JMP ECHO;
CALC:  CONST 0x20;
    STORE LIGHT1;
    LOAD LIGHT1;
    LOAD A0;
    ADD B0;
    STORE C0;
    LOAD C0;
    SUBI 10;
    STORE TMP;
    LOAD TMP;
    SHL;
    LOAD CARRY;
    JZ CA1;
    ADDI 0;
    JMP ADD2;
CA1:LOAD TMP;
    STORE C0;
    LOAD C0;
    CONST 0xFF;
    ADDI 0xFF;
ADD2:LOAD A1;
    ADDC B1;
    STORE C1;
    LOAD C1;
    SUBI 10;
    STORE TMP;
    LOAD TMP;
    SHL;
    LOAD CARRY;
    JZ CA2;
    ADDI 0;
    JMP ADD3;
CA2:LOAD TMP;
    STORE C1;
    LOAD C1;
    CONST 0xFF;
    ADDI 0xFF;
ADD3:LOAD A2;
    ADDC B2;
    STORE C2;
    LOAD C2;
    SUBI 10;
    STORE TMP;
    LOAD TMP;
    SHL;
    LOAD CARRY;
    JZ CA3;
    ADDI 0;
    JMP ADD4;
CA3:LOAD TMP;
    STORE C2;
    LOAD C2;
    CONST 0xFF;
    ADDI 0xFF;
ADD4:LOAD A3;
    ADDC B3;
    STORE C3;
    LOAD C3;
    SUBI 10;
    STORE TMP;
    LOAD TMP;
    SHL;
    LOAD CARRY;
    JZ CA4;
    ADDI 0;
    JMP ADD5;
CA4:LOAD TMP;
    STORE C3;
    LOAD C3;
    CONST 0xFF;
    ADDI 0xFF;
ADD5:LOAD CARRY;
    STORE C4;
    LOAD C4;
    CONST C0;
    STORE DISP_ADDR;
    LOAD DISP_ADDR;
    CONST WAIT;
    STORE RET;
    LOAD RET;
    JMP ECHO;
WAIT: CONST WAIT_OK;
    STORE RET;
    LOAD RET;
    JMP INPUT;
WAIT_OK: LOAD NEXT;
    JZ READ1;
    JMP WAIT;
INPUT: LOAD DIP1;
    ANDI 0x03;
    STORE DIP;
    LOAD DIP;
    JZ INPUT;
    ANDI 0x02;
    JZ ST_NEXT1;
    JMP ST_NEXT;
ST_NEXT1: LOAD DIP;
    ANDI 0x01;
    JZ INPUT;    
    JMP ST_DATA;
ST_NEXT: CONST 0;
    STORE NEXT;
    LOAD NEXT;
    JMP RELEASE;
ST_DATA: CONST 1;
    STORE NEXT;
    LOAD NEXT;
    LOAD DIP2;
    STORE DATA;
    LOAD DATA;
    JMP RELEASE;
RELEASE:LOAD DIP1;
    JZ RETURN;
    JMP RELEASE;
RETURN: LOAD RET;
    JACC;
ECHO: LOAD DISP_ADDR;
    LACC;
    STORE LED6;
    LOAD LED6;
    LOAD DISP_ADDR;
    ADDI 1;
    LACC;
    STORE LED5;
    LOAD LED5;
    LOAD DISP_ADDR;
    ADDI 2;
    LACC;
    STORE LED4;
    LOAD LED4;
    LOAD DISP_ADDR;
    ADDI 3;
    LACC;
    STORE LED3;
    LOAD LED3;
    LOAD DISP_ADDR;
    ADDI 4;
    LACC;
    STORE LED2;
    LOAD LED2;
    LOAD RET;
    JACC;
END.
